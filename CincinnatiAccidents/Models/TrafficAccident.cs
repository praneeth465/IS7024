// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TrafficAccident;
//
//    var trafficAccident = TrafficAccident.FromJson(jsonString);

namespace QuickTypeTraffic
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TrafficAccident
    {
        [JsonProperty("address_x", NullValueHandling = NullValueHandling.Ignore)]
        public string AddressX { get; set; }

        [JsonProperty("age")]
        public Age Age { get; set; }

        [JsonProperty("community_council_neighborhood")]
        public string CommunityCouncilNeighborhood { get; set; }

        [JsonProperty("cpd_neighborhood")]
        public string CpdNeighborhood { get; set; }

        [JsonProperty("crashdate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Crashdate { get; set; }

        [JsonProperty("crashlocation", NullValueHandling = NullValueHandling.Ignore)]
        public Crashlocation? Crashlocation { get; set; }

        [JsonProperty("crashseverity", NullValueHandling = NullValueHandling.Ignore)]
        public Crashseverity? Crashseverity { get; set; }

        [JsonProperty("crashseverityid", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Crashseverityid { get; set; }

        [JsonProperty("datecrashreported", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Datecrashreported { get; set; }

        [JsonProperty("dayofweek", NullValueHandling = NullValueHandling.Ignore)]
        public Dayofweek? Dayofweek { get; set; }

        [JsonProperty("injuries", NullValueHandling = NullValueHandling.Ignore)]
        public Injuries? Injuries { get; set; }

        [JsonProperty("instanceid")]
        public string Instanceid { get; set; }

        [JsonProperty("lightconditionsprimary", NullValueHandling = NullValueHandling.Ignore)]
        public Lightconditionsprimary? Lightconditionsprimary { get; set; }

        [JsonProperty("localreportno", NullValueHandling = NullValueHandling.Ignore)]
        public string Localreportno { get; set; }

        [JsonProperty("mannerofcrash", NullValueHandling = NullValueHandling.Ignore)]
        public Mannerofcrash? Mannerofcrash { get; set; }

        [JsonProperty("roadconditionsprimary", NullValueHandling = NullValueHandling.Ignore)]
        public Roadconditionsprimary? Roadconditionsprimary { get; set; }

        [JsonProperty("roadcontour", NullValueHandling = NullValueHandling.Ignore)]
        public Roadcontour? Roadcontour { get; set; }

        [JsonProperty("roadsurface", NullValueHandling = NullValueHandling.Ignore)]
        public Roadsurface? Roadsurface { get; set; }

        [JsonProperty("sna_neighborhood")]
        public string SnaNeighborhood { get; set; }

        [JsonProperty("typeofperson", NullValueHandling = NullValueHandling.Ignore)]
        public Typeofperson? Typeofperson { get; set; }

        [JsonProperty("weather", NullValueHandling = NullValueHandling.Ignore)]
        public Weather? Weather { get; set; }

        [JsonProperty("zip", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Zip { get; set; }

        [JsonProperty("unittype", NullValueHandling = NullValueHandling.Ignore)]
        public string Unittype { get; set; }

        [JsonProperty("latitude_x", NullValueHandling = NullValueHandling.Ignore)]
        public string LatitudeX { get; set; }

        [JsonProperty("gender", NullValueHandling = NullValueHandling.Ignore)]
        public Gender? Gender { get; set; }

        [JsonProperty("longitude_x", NullValueHandling = NullValueHandling.Ignore)]
        public string LongitudeX { get; set; }
    }

    public enum Age { Over70, The1825, The2630, The3140, The4150, The5160, The6170, Under18, Unknown };

    public enum Crashlocation { The01NotAnIntersection, The02FourWayIntersection, The03TIntersection, The04YIntersection, The06FivePointOrMore, The07OnRamp, The08OffRamp, The10DrivewayAlleyAccess, The11RailwayGradeCrossing };

    public enum Crashseverity { P, The1FatalInjury, The2Injury, The2SeriousInjurySuspected, The3MinorInjurySuspected, The3PropertyDamageOnlyPdo, The4InjuryPossible, The5PropertyDamageOnly };

    public enum Dayofweek { Fri, Mon, Sat, Sun, Thu, Tue, Wed };

    public enum Gender { FFemale, MMale, Male };

    public enum Injuries { The1NoInjuryNoneReported, The2Possible, The3NonIncapacitating, The3SuspectedMinorInjury, The4Incapacitating, The4PossibleInjury, The5Fatal, The5NoApparentyInjury };

    public enum Lightconditionsprimary { The1Daylight, The2Dawn, The2Dusk, The3DarkLightedRoadway, The3Dusk, The4DarkLightedRoadway, The5DarkRoadwayNotLighted, The5DarkRoadwayNotLightied, The5DarkUnknownRoadwayLighting, The6DarkUnknownRoadwayLighting, The8Other, The9Unknown };

    public enum Mannerofcrash { The1NotCollisionBetweenTwoMotorVehiclesInTransport, The2RearEnd, The3HeadOn, The4RearToRear, The5Backing, The6Angle, The7SideswipeSameDirection, The8SideswipeOppositeDirection, The9Unknown };

    public enum Roadconditionsprimary { The01Dry, The02Wet, The03Snow, The04Ice, The07Slush, The09Unknown, The99Unknown };

    public enum Roadcontour { The1StraightLevel, The2StraightGrade, The3CurveLevel, The4CurveGrade, The9Unknown };

    public enum Roadsurface { The1Concrete, The2BlacktopBituminousAsphalt, The3BrickBlock, The4SlagGravelStone };

    public enum Typeofperson { DDriver, OOccupant, PPedestrian };

    public enum Weather { The1Clear, The2Cloudy, The3FogSmogSmoke, The4Rain, The5SleetHail, The6Snow, The99OtherUnknown, The9OtherUnknown, Weather5SleetHail };

    public partial class TrafficAccident
    {
        public static TrafficAccident[] FromJson(string json) => JsonConvert.DeserializeObject<TrafficAccident[]>(json, QuickTypeTraffic.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TrafficAccident[] self) => JsonConvert.SerializeObject(self, QuickTypeTraffic.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AgeConverter.Singleton,
                CrashlocationConverter.Singleton,
                CrashseverityConverter.Singleton,
                DayofweekConverter.Singleton,
                GenderConverter.Singleton,
                InjuriesConverter.Singleton,
                LightconditionsprimaryConverter.Singleton,
                MannerofcrashConverter.Singleton,
                RoadconditionsprimaryConverter.Singleton,
                RoadcontourConverter.Singleton,
                RoadsurfaceConverter.Singleton,
                TypeofpersonConverter.Singleton,
                WeatherConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AgeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Age) || t == typeof(Age?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "18-25":
                    return Age.The1825;
                case "26-30":
                    return Age.The2630;
                case "31-40":
                    return Age.The3140;
                case "41-50":
                    return Age.The4150;
                case "51-60":
                    return Age.The5160;
                case "61-70":
                    return Age.The6170;
                case "OVER 70":
                    return Age.Over70;
                case "UNDER 18":
                    return Age.Under18;
                case "UNKNOWN":
                    return Age.Unknown;
            }
            throw new Exception("Cannot unmarshal type Age");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Age)untypedValue;
            switch (value)
            {
                case Age.The1825:
                    serializer.Serialize(writer, "18-25");
                    return;
                case Age.The2630:
                    serializer.Serialize(writer, "26-30");
                    return;
                case Age.The3140:
                    serializer.Serialize(writer, "31-40");
                    return;
                case Age.The4150:
                    serializer.Serialize(writer, "41-50");
                    return;
                case Age.The5160:
                    serializer.Serialize(writer, "51-60");
                    return;
                case Age.The6170:
                    serializer.Serialize(writer, "61-70");
                    return;
                case Age.Over70:
                    serializer.Serialize(writer, "OVER 70");
                    return;
                case Age.Under18:
                    serializer.Serialize(writer, "UNDER 18");
                    return;
                case Age.Unknown:
                    serializer.Serialize(writer, "UNKNOWN");
                    return;
            }
            throw new Exception("Cannot marshal type Age");
        }

        public static readonly AgeConverter Singleton = new AgeConverter();
    }

    internal class CrashlocationConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Crashlocation) || t == typeof(Crashlocation?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "01 - NOT AN INTERSECTION":
                    return Crashlocation.The01NotAnIntersection;
                case "02 - FOUR-WAY INTERSECTION":
                    return Crashlocation.The02FourWayIntersection;
                case "03 - T-INTERSECTION":
                    return Crashlocation.The03TIntersection;
                case "04 - Y-INTERSECTION":
                    return Crashlocation.The04YIntersection;
                case "06 - FIVE-POINT, OR MORE":
                    return Crashlocation.The06FivePointOrMore;
                case "07 - ON RAMP":
                    return Crashlocation.The07OnRamp;
                case "08 - OFF RAMP":
                    return Crashlocation.The08OffRamp;
                case "10 - DRIVEWAY/ALLEY ACCESS":
                    return Crashlocation.The10DrivewayAlleyAccess;
                case "11 - RAILWAY GRADE CROSSING":
                    return Crashlocation.The11RailwayGradeCrossing;
            }
            throw new Exception("Cannot unmarshal type Crashlocation");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Crashlocation)untypedValue;
            switch (value)
            {
                case Crashlocation.The01NotAnIntersection:
                    serializer.Serialize(writer, "01 - NOT AN INTERSECTION");
                    return;
                case Crashlocation.The02FourWayIntersection:
                    serializer.Serialize(writer, "02 - FOUR-WAY INTERSECTION");
                    return;
                case Crashlocation.The03TIntersection:
                    serializer.Serialize(writer, "03 - T-INTERSECTION");
                    return;
                case Crashlocation.The04YIntersection:
                    serializer.Serialize(writer, "04 - Y-INTERSECTION");
                    return;
                case Crashlocation.The06FivePointOrMore:
                    serializer.Serialize(writer, "06 - FIVE-POINT, OR MORE");
                    return;
                case Crashlocation.The07OnRamp:
                    serializer.Serialize(writer, "07 - ON RAMP");
                    return;
                case Crashlocation.The08OffRamp:
                    serializer.Serialize(writer, "08 - OFF RAMP");
                    return;
                case Crashlocation.The10DrivewayAlleyAccess:
                    serializer.Serialize(writer, "10 - DRIVEWAY/ALLEY ACCESS");
                    return;
                case Crashlocation.The11RailwayGradeCrossing:
                    serializer.Serialize(writer, "11 - RAILWAY GRADE CROSSING");
                    return;
            }
            throw new Exception("Cannot marshal type Crashlocation");
        }

        public static readonly CrashlocationConverter Singleton = new CrashlocationConverter();
    }

    internal class CrashseverityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Crashseverity) || t == typeof(Crashseverity?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1 - FATAL INJURY":
                    return Crashseverity.The1FatalInjury;
                case "2 - INJURY":
                    return Crashseverity.The2Injury;
                case "2 - SERIOUS INJURY SUSPECTED":
                    return Crashseverity.The2SeriousInjurySuspected;
                case "3 - MINOR INJURY SUSPECTED":
                    return Crashseverity.The3MinorInjurySuspected;
                case "3 - PROPERTY DAMAGE ONLY (PDO)":
                    return Crashseverity.The3PropertyDamageOnlyPdo;
                case "4 - INJURY POSSIBLE":
                    return Crashseverity.The4InjuryPossible;
                case "5 - PROPERTY DAMAGE ONLY":
                    return Crashseverity.The5PropertyDamageOnly;
                case "P":
                    return Crashseverity.P;
            }
            throw new Exception("Cannot unmarshal type Crashseverity");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Crashseverity)untypedValue;
            switch (value)
            {
                case Crashseverity.The1FatalInjury:
                    serializer.Serialize(writer, "1 - FATAL INJURY");
                    return;
                case Crashseverity.The2Injury:
                    serializer.Serialize(writer, "2 - INJURY");
                    return;
                case Crashseverity.The2SeriousInjurySuspected:
                    serializer.Serialize(writer, "2 - SERIOUS INJURY SUSPECTED");
                    return;
                case Crashseverity.The3MinorInjurySuspected:
                    serializer.Serialize(writer, "3 - MINOR INJURY SUSPECTED");
                    return;
                case Crashseverity.The3PropertyDamageOnlyPdo:
                    serializer.Serialize(writer, "3 - PROPERTY DAMAGE ONLY (PDO)");
                    return;
                case Crashseverity.The4InjuryPossible:
                    serializer.Serialize(writer, "4 - INJURY POSSIBLE");
                    return;
                case Crashseverity.The5PropertyDamageOnly:
                    serializer.Serialize(writer, "5 - PROPERTY DAMAGE ONLY");
                    return;
                case Crashseverity.P:
                    serializer.Serialize(writer, "P");
                    return;
            }
            throw new Exception("Cannot marshal type Crashseverity");
        }

        public static readonly CrashseverityConverter Singleton = new CrashseverityConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class DayofweekConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Dayofweek) || t == typeof(Dayofweek?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "FRI":
                    return Dayofweek.Fri;
                case "MON":
                    return Dayofweek.Mon;
                case "SAT":
                    return Dayofweek.Sat;
                case "SUN":
                    return Dayofweek.Sun;
                case "THU":
                    return Dayofweek.Thu;
                case "TUE":
                    return Dayofweek.Tue;
                case "WED":
                    return Dayofweek.Wed;
            }
            throw new Exception("Cannot unmarshal type Dayofweek");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Dayofweek)untypedValue;
            switch (value)
            {
                case Dayofweek.Fri:
                    serializer.Serialize(writer, "FRI");
                    return;
                case Dayofweek.Mon:
                    serializer.Serialize(writer, "MON");
                    return;
                case Dayofweek.Sat:
                    serializer.Serialize(writer, "SAT");
                    return;
                case Dayofweek.Sun:
                    serializer.Serialize(writer, "SUN");
                    return;
                case Dayofweek.Thu:
                    serializer.Serialize(writer, "THU");
                    return;
                case Dayofweek.Tue:
                    serializer.Serialize(writer, "TUE");
                    return;
                case Dayofweek.Wed:
                    serializer.Serialize(writer, "WED");
                    return;
            }
            throw new Exception("Cannot marshal type Dayofweek");
        }

        public static readonly DayofweekConverter Singleton = new DayofweekConverter();
    }

    internal class GenderConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Gender) || t == typeof(Gender?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "F - FEMALE":
                    return Gender.FFemale;
                case "M - MALE":
                    return Gender.MMale;
                case "MALE":
                    return Gender.Male;
            }
            throw new Exception("Cannot unmarshal type Gender");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Gender)untypedValue;
            switch (value)
            {
                case Gender.FFemale:
                    serializer.Serialize(writer, "F - FEMALE");
                    return;
                case Gender.MMale:
                    serializer.Serialize(writer, "M - MALE");
                    return;
                case Gender.Male:
                    serializer.Serialize(writer, "MALE");
                    return;
            }
            throw new Exception("Cannot marshal type Gender");
        }

        public static readonly GenderConverter Singleton = new GenderConverter();
    }

    internal class InjuriesConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Injuries) || t == typeof(Injuries?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1 - NO INJURY / NONE REPORTED":
                    return Injuries.The1NoInjuryNoneReported;
                case "2 - POSSIBLE":
                    return Injuries.The2Possible;
                case "3 - NON-INCAPACITATING":
                    return Injuries.The3NonIncapacitating;
                case "3 - SUSPECTED MINOR INJURY":
                    return Injuries.The3SuspectedMinorInjury;
                case "4 - INCAPACITATING":
                    return Injuries.The4Incapacitating;
                case "4 - POSSIBLE INJURY":
                    return Injuries.The4PossibleInjury;
                case "5 - FATAL":
                    return Injuries.The5Fatal;
                case "5 - NO APPARENTY INJURY":
                    return Injuries.The5NoApparentyInjury;
            }
            throw new Exception("Cannot unmarshal type Injuries");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Injuries)untypedValue;
            switch (value)
            {
                case Injuries.The1NoInjuryNoneReported:
                    serializer.Serialize(writer, "1 - NO INJURY / NONE REPORTED");
                    return;
                case Injuries.The2Possible:
                    serializer.Serialize(writer, "2 - POSSIBLE");
                    return;
                case Injuries.The3NonIncapacitating:
                    serializer.Serialize(writer, "3 - NON-INCAPACITATING");
                    return;
                case Injuries.The3SuspectedMinorInjury:
                    serializer.Serialize(writer, "3 - SUSPECTED MINOR INJURY");
                    return;
                case Injuries.The4Incapacitating:
                    serializer.Serialize(writer, "4 - INCAPACITATING");
                    return;
                case Injuries.The4PossibleInjury:
                    serializer.Serialize(writer, "4 - POSSIBLE INJURY");
                    return;
                case Injuries.The5Fatal:
                    serializer.Serialize(writer, "5 - FATAL");
                    return;
                case Injuries.The5NoApparentyInjury:
                    serializer.Serialize(writer, "5 - NO APPARENTY INJURY");
                    return;
            }
            throw new Exception("Cannot marshal type Injuries");
        }

        public static readonly InjuriesConverter Singleton = new InjuriesConverter();
    }

    internal class LightconditionsprimaryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Lightconditionsprimary) || t == typeof(Lightconditionsprimary?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1 - DAYLIGHT":
                    return Lightconditionsprimary.The1Daylight;
                case "2 - DAWN":
                    return Lightconditionsprimary.The2Dawn;
                case "2 - DUSK":
                    return Lightconditionsprimary.The2Dusk;
                case "3 - DARK - LIGHTED ROADWAY":
                    return Lightconditionsprimary.The3DarkLightedRoadway;
                case "3 - DUSK":
                    return Lightconditionsprimary.The3Dusk;
                case "4 - DARK - LIGHTED ROADWAY":
                    return Lightconditionsprimary.The4DarkLightedRoadway;
                case "5 - DARK – ROADWAY NOT LIGHTED":
                    return Lightconditionsprimary.The5DarkRoadwayNotLighted;
                case "5 - DARK – ROADWAY NOT LIGHTIED":
                    return Lightconditionsprimary.The5DarkRoadwayNotLightied;
                case "5 - DARK – UNKNOWN ROADWAY LIGHTING":
                    return Lightconditionsprimary.The5DarkUnknownRoadwayLighting;
                case "6 - DARK – UNKNOWN ROADWAY LIGHTING":
                    return Lightconditionsprimary.The6DarkUnknownRoadwayLighting;
                case "8 - OTHER":
                    return Lightconditionsprimary.The8Other;
                case "9 - UNKNOWN":
                    return Lightconditionsprimary.The9Unknown;
            }
            throw new Exception("Cannot unmarshal type Lightconditionsprimary");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Lightconditionsprimary)untypedValue;
            switch (value)
            {
                case Lightconditionsprimary.The1Daylight:
                    serializer.Serialize(writer, "1 - DAYLIGHT");
                    return;
                case Lightconditionsprimary.The2Dawn:
                    serializer.Serialize(writer, "2 - DAWN");
                    return;
                case Lightconditionsprimary.The2Dusk:
                    serializer.Serialize(writer, "2 - DUSK");
                    return;
                case Lightconditionsprimary.The3DarkLightedRoadway:
                    serializer.Serialize(writer, "3 - DARK - LIGHTED ROADWAY");
                    return;
                case Lightconditionsprimary.The3Dusk:
                    serializer.Serialize(writer, "3 - DUSK");
                    return;
                case Lightconditionsprimary.The4DarkLightedRoadway:
                    serializer.Serialize(writer, "4 - DARK - LIGHTED ROADWAY");
                    return;
                case Lightconditionsprimary.The5DarkRoadwayNotLighted:
                    serializer.Serialize(writer, "5 - DARK – ROADWAY NOT LIGHTED");
                    return;
                case Lightconditionsprimary.The5DarkRoadwayNotLightied:
                    serializer.Serialize(writer, "5 - DARK – ROADWAY NOT LIGHTIED");
                    return;
                case Lightconditionsprimary.The5DarkUnknownRoadwayLighting:
                    serializer.Serialize(writer, "5 - DARK – UNKNOWN ROADWAY LIGHTING");
                    return;
                case Lightconditionsprimary.The6DarkUnknownRoadwayLighting:
                    serializer.Serialize(writer, "6 - DARK – UNKNOWN ROADWAY LIGHTING");
                    return;
                case Lightconditionsprimary.The8Other:
                    serializer.Serialize(writer, "8 - OTHER");
                    return;
                case Lightconditionsprimary.The9Unknown:
                    serializer.Serialize(writer, "9 - UNKNOWN");
                    return;
            }
            throw new Exception("Cannot marshal type Lightconditionsprimary");
        }

        public static readonly LightconditionsprimaryConverter Singleton = new LightconditionsprimaryConverter();
    }

    internal class MannerofcrashConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Mannerofcrash) || t == typeof(Mannerofcrash?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1 - NOT COLLISION BETWEEN TWO MOTOR VEHICLES IN TRANSPORT":
                    return Mannerofcrash.The1NotCollisionBetweenTwoMotorVehiclesInTransport;
                case "2 - REAR-END":
                    return Mannerofcrash.The2RearEnd;
                case "3 - HEAD-ON":
                    return Mannerofcrash.The3HeadOn;
                case "4 - REAR-TO-REAR":
                    return Mannerofcrash.The4RearToRear;
                case "5 - BACKING":
                    return Mannerofcrash.The5Backing;
                case "6 - ANGLE":
                    return Mannerofcrash.The6Angle;
                case "7 - SIDESWIPE, SAME DIRECTION":
                    return Mannerofcrash.The7SideswipeSameDirection;
                case "8 - SIDESWIPE, OPPOSITE DIRECTION":
                    return Mannerofcrash.The8SideswipeOppositeDirection;
                case "9 - UNKNOWN":
                    return Mannerofcrash.The9Unknown;
            }
            throw new Exception("Cannot unmarshal type Mannerofcrash");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Mannerofcrash)untypedValue;
            switch (value)
            {
                case Mannerofcrash.The1NotCollisionBetweenTwoMotorVehiclesInTransport:
                    serializer.Serialize(writer, "1 - NOT COLLISION BETWEEN TWO MOTOR VEHICLES IN TRANSPORT");
                    return;
                case Mannerofcrash.The2RearEnd:
                    serializer.Serialize(writer, "2 - REAR-END");
                    return;
                case Mannerofcrash.The3HeadOn:
                    serializer.Serialize(writer, "3 - HEAD-ON");
                    return;
                case Mannerofcrash.The4RearToRear:
                    serializer.Serialize(writer, "4 - REAR-TO-REAR");
                    return;
                case Mannerofcrash.The5Backing:
                    serializer.Serialize(writer, "5 - BACKING");
                    return;
                case Mannerofcrash.The6Angle:
                    serializer.Serialize(writer, "6 - ANGLE");
                    return;
                case Mannerofcrash.The7SideswipeSameDirection:
                    serializer.Serialize(writer, "7 - SIDESWIPE, SAME DIRECTION");
                    return;
                case Mannerofcrash.The8SideswipeOppositeDirection:
                    serializer.Serialize(writer, "8 - SIDESWIPE, OPPOSITE DIRECTION");
                    return;
                case Mannerofcrash.The9Unknown:
                    serializer.Serialize(writer, "9 - UNKNOWN");
                    return;
            }
            throw new Exception("Cannot marshal type Mannerofcrash");
        }

        public static readonly MannerofcrashConverter Singleton = new MannerofcrashConverter();
    }

    internal class RoadconditionsprimaryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Roadconditionsprimary) || t == typeof(Roadconditionsprimary?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "01 - DRY":
                    return Roadconditionsprimary.The01Dry;
                case "02 - WET":
                    return Roadconditionsprimary.The02Wet;
                case "03 - SNOW":
                    return Roadconditionsprimary.The03Snow;
                case "04 - ICE":
                    return Roadconditionsprimary.The04Ice;
                case "07 - SLUSH":
                    return Roadconditionsprimary.The07Slush;
                case "09 - UNKNOWN":
                    return Roadconditionsprimary.The09Unknown;
                case "99 - UNKNOWN":
                    return Roadconditionsprimary.The99Unknown;
            }
            throw new Exception("Cannot unmarshal type Roadconditionsprimary");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Roadconditionsprimary)untypedValue;
            switch (value)
            {
                case Roadconditionsprimary.The01Dry:
                    serializer.Serialize(writer, "01 - DRY");
                    return;
                case Roadconditionsprimary.The02Wet:
                    serializer.Serialize(writer, "02 - WET");
                    return;
                case Roadconditionsprimary.The03Snow:
                    serializer.Serialize(writer, "03 - SNOW");
                    return;
                case Roadconditionsprimary.The04Ice:
                    serializer.Serialize(writer, "04 - ICE");
                    return;
                case Roadconditionsprimary.The07Slush:
                    serializer.Serialize(writer, "07 - SLUSH");
                    return;
                case Roadconditionsprimary.The09Unknown:
                    serializer.Serialize(writer, "09 - UNKNOWN");
                    return;
                case Roadconditionsprimary.The99Unknown:
                    serializer.Serialize(writer, "99 - UNKNOWN");
                    return;
            }
            throw new Exception("Cannot marshal type Roadconditionsprimary");
        }

        public static readonly RoadconditionsprimaryConverter Singleton = new RoadconditionsprimaryConverter();
    }

    internal class RoadcontourConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Roadcontour) || t == typeof(Roadcontour?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1 - STRAIGHT LEVEL":
                    return Roadcontour.The1StraightLevel;
                case "2 - STRAIGHT GRADE":
                    return Roadcontour.The2StraightGrade;
                case "3 - CURVE LEVEL":
                    return Roadcontour.The3CurveLevel;
                case "4 - CURVE GRADE":
                    return Roadcontour.The4CurveGrade;
                case "9 - UNKNOWN":
                    return Roadcontour.The9Unknown;
            }
            throw new Exception("Cannot unmarshal type Roadcontour");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Roadcontour)untypedValue;
            switch (value)
            {
                case Roadcontour.The1StraightLevel:
                    serializer.Serialize(writer, "1 - STRAIGHT LEVEL");
                    return;
                case Roadcontour.The2StraightGrade:
                    serializer.Serialize(writer, "2 - STRAIGHT GRADE");
                    return;
                case Roadcontour.The3CurveLevel:
                    serializer.Serialize(writer, "3 - CURVE LEVEL");
                    return;
                case Roadcontour.The4CurveGrade:
                    serializer.Serialize(writer, "4 - CURVE GRADE");
                    return;
                case Roadcontour.The9Unknown:
                    serializer.Serialize(writer, "9 - UNKNOWN");
                    return;
            }
            throw new Exception("Cannot marshal type Roadcontour");
        }

        public static readonly RoadcontourConverter Singleton = new RoadcontourConverter();
    }

    internal class RoadsurfaceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Roadsurface) || t == typeof(Roadsurface?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1 - CONCRETE":
                    return Roadsurface.The1Concrete;
                case "2 - BLACKTOP, BITUMINOUS, ASPHALT":
                    return Roadsurface.The2BlacktopBituminousAsphalt;
                case "3 - BRICK/BLOCK":
                    return Roadsurface.The3BrickBlock;
                case "4 - SLAG, GRAVEL, STONE":
                    return Roadsurface.The4SlagGravelStone;
            }
            throw new Exception("Cannot unmarshal type Roadsurface");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Roadsurface)untypedValue;
            switch (value)
            {
                case Roadsurface.The1Concrete:
                    serializer.Serialize(writer, "1 - CONCRETE");
                    return;
                case Roadsurface.The2BlacktopBituminousAsphalt:
                    serializer.Serialize(writer, "2 - BLACKTOP, BITUMINOUS, ASPHALT");
                    return;
                case Roadsurface.The3BrickBlock:
                    serializer.Serialize(writer, "3 - BRICK/BLOCK");
                    return;
                case Roadsurface.The4SlagGravelStone:
                    serializer.Serialize(writer, "4 - SLAG, GRAVEL, STONE");
                    return;
            }
            throw new Exception("Cannot marshal type Roadsurface");
        }

        public static readonly RoadsurfaceConverter Singleton = new RoadsurfaceConverter();
    }

    internal class TypeofpersonConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Typeofperson) || t == typeof(Typeofperson?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "D - DRIVER":
                    return Typeofperson.DDriver;
                case "O - OCCUPANT":
                    return Typeofperson.OOccupant;
                case "P - PEDESTRIAN":
                    return Typeofperson.PPedestrian;
            }
            throw new Exception("Cannot unmarshal type Typeofperson");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Typeofperson)untypedValue;
            switch (value)
            {
                case Typeofperson.DDriver:
                    serializer.Serialize(writer, "D - DRIVER");
                    return;
                case Typeofperson.OOccupant:
                    serializer.Serialize(writer, "O - OCCUPANT");
                    return;
                case Typeofperson.PPedestrian:
                    serializer.Serialize(writer, "P - PEDESTRIAN");
                    return;
            }
            throw new Exception("Cannot marshal type Typeofperson");
        }

        public static readonly TypeofpersonConverter Singleton = new TypeofpersonConverter();
    }

    internal class WeatherConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Weather) || t == typeof(Weather?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1 - CLEAR":
                    return Weather.The1Clear;
                case "2 - CLOUDY":
                    return Weather.The2Cloudy;
                case "3 - FOG, SMOG, SMOKE":
                    return Weather.The3FogSmogSmoke;
                case "4 - RAIN":
                    return Weather.The4Rain;
                case "5 - SLEET, HAIL":
                    return Weather.Weather5SleetHail;
                case "5 - SLEET,HAIL":
                    return Weather.The5SleetHail;
                case "6 - SNOW":
                    return Weather.The6Snow;
                case "9 - OTHER/UNKNOWN":
                    return Weather.The9OtherUnknown;
                case "99 - OTHER/UNKNOWN":
                    return Weather.The99OtherUnknown;
            }
            throw new Exception("Cannot unmarshal type Weather");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Weather)untypedValue;
            switch (value)
            {
                case Weather.The1Clear:
                    serializer.Serialize(writer, "1 - CLEAR");
                    return;
                case Weather.The2Cloudy:
                    serializer.Serialize(writer, "2 - CLOUDY");
                    return;
                case Weather.The3FogSmogSmoke:
                    serializer.Serialize(writer, "3 - FOG, SMOG, SMOKE");
                    return;
                case Weather.The4Rain:
                    serializer.Serialize(writer, "4 - RAIN");
                    return;
                case Weather.Weather5SleetHail:
                    serializer.Serialize(writer, "5 - SLEET, HAIL");
                    return;
                case Weather.The5SleetHail:
                    serializer.Serialize(writer, "5 - SLEET,HAIL");
                    return;
                case Weather.The6Snow:
                    serializer.Serialize(writer, "6 - SNOW");
                    return;
                case Weather.The9OtherUnknown:
                    serializer.Serialize(writer, "9 - OTHER/UNKNOWN");
                    return;
                case Weather.The99OtherUnknown:
                    serializer.Serialize(writer, "99 - OTHER/UNKNOWN");
                    return;
            }
            throw new Exception("Cannot marshal type Weather");
        }

        public static readonly WeatherConverter Singleton = new WeatherConverter();
    }
}
